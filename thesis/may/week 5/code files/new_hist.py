# -*- coding: utf-8 -*-
"""new_hist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XpYy68qqa0FbrykM7JYxbgk4ZCTlsQ4Q
"""



""" it generates histogram for every grid point with 10 bins"""
import vtk
from vtk.util.numpy_support import vtk_to_numpy
import numpy as np
import random
from tqdm import tqdm

# Set seeds for reproducibility
np.random.seed(42)
random.seed(42)
# Parameters
num_samples = 2000  # Number of samples per grid point
num_bins = 10       # Number of bins for histograms
vti_file_path = "Teardrop_Gaussian.vti"
output_vti_file = "histogram_sklearn_dataset.vti"

########################################
# Step 1: Read the Input VTI File
########################################

reader = vtk.vtkXMLImageDataReader()
reader.SetFileName(vti_file_path)
reader.Update()
data = reader.GetOutput()

n_pts = data.GetNumberOfPoints()
dim = data.GetDimensions()
origin = data.GetOrigin()
spacing = data.GetSpacing()
pdata = data.GetPointData()

print(f"Number of points: {n_pts}, Dimensions: {dim}")

########################################
# Step 2: Detect Variable Pairs (XXX_Mean + XXX_Std)
########################################

array_names = [pdata.GetArrayName(i) for i in range(pdata.GetNumberOfArrays())]
variables = array_names

print(f"Detected variables: {variables}")

########################################
# Step 3: Create Output vtkImageData
########################################

imageData = vtk.vtkImageData()
imageData.SetDimensions(dim)
imageData.SetOrigin(origin)
imageData.SetSpacing(spacing)
print(f"Origin: {origin}, Spacing: {spacing}")

########################################
# Step 4: Generate Histograms for Each Variable
########################################

print(f"\nProcessing variable:")

mean_array = vtk_to_numpy(pdata.GetArray(variables[0]))
std_array = vtk_to_numpy(pdata.GetArray(variables[1]))

assert mean_array.shape[0] == n_pts, f"Mismatch in Mean"
assert std_array.shape[0] == n_pts, f"Mismatch in Std"

histograms = np.zeros((n_pts, num_bins), dtype=np.int32)

for idx in tqdm(range(n_pts)):
    mean = mean_array[idx]
    std = std_array[idx]
    samples = np.random.normal(mean, std, num_samples)
    hist, _ = np.histogram(samples, bins=num_bins)
    histograms[idx, :] = hist

# Add histogram bins
for bin_idx in range(num_bins):
    bin_array = vtk.vtkIntArray()
    bin_array.SetNumberOfComponents(1)
    bin_array.SetNumberOfTuples(n_pts)
    bin_array.SetName(f"bin_{bin_idx+1}")

    for i in range(n_pts):
        bin_array.SetTuple1(i, int(histograms[i, bin_idx]))

    imageData.GetPointData().AddArray(bin_array)


########################################
# Step 5: Write Output VTI File
########################################

writer = vtk.vtkXMLImageDataWriter()
writer.SetFileName(output_vti_file)
writer.SetInputData(imageData)
writer.Write()

print(f"\nHistogram VTI file saved as '{output_vti_file}'")

reader=vtk.vtkXMLImageDataReader()
reader.SetFileName("/content/histogram_sklearn_dataset.vti")

reader.update()
image_data=reader.GetOutput()
point_data=image_data.GetPointData()
print(point_data)

import vtk
from vtk.util.numpy_support import vtk_to_numpy
import matplotlib.pyplot as plt
import numpy as np

# Load the VTI file
reader = vtk.vtkXMLImageDataReader()
reader.SetFileName("histogram_sklearn_dataset.vti")
reader.Update()
data = reader.GetOutput()
point_data = data.GetPointData()
# Load all 10 bin arrays
bins = [vtk_to_numpy(point_data.GetArray(f"bin_{i+1}")) for i in range(10)]

points = [100,700,1400,780]
plt.figure(figsize=(15, 4))

for i, idx in enumerate(points):
    values = [bins[j][idx] for j in range(10)]
    plt.subplot(1, len(points), i+1)
    plt.bar(range(1, 11), values, color='lightcoral', edgecolor='black')
    plt.title(f"Point {idx}")
    plt.xticks(range(1, 11))
    plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()

